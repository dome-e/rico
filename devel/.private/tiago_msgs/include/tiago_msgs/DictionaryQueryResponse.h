// Generated by gencpp from file tiago_msgs/DictionaryQueryResponse.msg
// DO NOT EDIT!


#ifndef TIAGO_MSGS_MESSAGE_DICTIONARYQUERYRESPONSE_H
#define TIAGO_MSGS_MESSAGE_DICTIONARYQUERYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tiago_msgs/CaseInstance.h>

namespace tiago_msgs
{
template <class ContainerAllocator>
struct DictionaryQueryResponse_
{
  typedef DictionaryQueryResponse_<ContainerAllocator> Type;

  DictionaryQueryResponse_()
    : case_names()
    , variants()  {
    }
  DictionaryQueryResponse_(const ContainerAllocator& _alloc)
    : case_names(_alloc)
    , variants(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _case_names_type;
  _case_names_type case_names;

   typedef std::vector< ::tiago_msgs::CaseInstance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tiago_msgs::CaseInstance_<ContainerAllocator> >::other >  _variants_type;
  _variants_type variants;





  typedef boost::shared_ptr< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DictionaryQueryResponse_

typedef ::tiago_msgs::DictionaryQueryResponse_<std::allocator<void> > DictionaryQueryResponse;

typedef boost::shared_ptr< ::tiago_msgs::DictionaryQueryResponse > DictionaryQueryResponsePtr;
typedef boost::shared_ptr< ::tiago_msgs::DictionaryQueryResponse const> DictionaryQueryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator1> & lhs, const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.case_names == rhs.case_names &&
    lhs.variants == rhs.variants;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator1> & lhs, const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6999d1be6e0f5100ecf769535aa9e4a2";
  }

  static const char* value(const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6999d1be6e0f5100ULL;
  static const uint64_t static_value2 = 0xecf769535aa9e4a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago_msgs/DictionaryQueryResponse";
  }

  static const char* value(const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] case_names\n"
"CaseInstance[] variants\n"
"\n"
"================================================================================\n"
"MSG: tiago_msgs/CaseInstance\n"
"string[] singular\n"
"string[] plural\n"
;
  }

  static const char* value(const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.case_names);
      stream.next(m.variants);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DictionaryQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago_msgs::DictionaryQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "case_names[]" << std::endl;
    for (size_t i = 0; i < v.case_names.size(); ++i)
    {
      s << indent << "  case_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.case_names[i]);
    }
    s << indent << "variants[]" << std::endl;
    for (size_t i = 0; i < v.variants.size(); ++i)
    {
      s << indent << "  variants[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tiago_msgs::CaseInstance_<ContainerAllocator> >::stream(s, indent + "    ", v.variants[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO_MSGS_MESSAGE_DICTIONARYQUERYRESPONSE_H
