// Generated by gencpp from file rosplan_tiago_scenarios_msgs/GetItemGoal.msg
// DO NOT EDIT!


#ifndef ROSPLAN_TIAGO_SCENARIOS_MSGS_MESSAGE_GETITEMGOAL_H
#define ROSPLAN_TIAGO_SCENARIOS_MSGS_MESSAGE_GETITEMGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosplan_tiago_scenarios_msgs
{
template <class ContainerAllocator>
struct GetItemGoal_
{
  typedef GetItemGoal_<ContainerAllocator> Type;

  GetItemGoal_()
    : item()  {
    }
  GetItemGoal_(const ContainerAllocator& _alloc)
    : item(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _item_type;
  _item_type item;





  typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GetItemGoal_

typedef ::rosplan_tiago_scenarios_msgs::GetItemGoal_<std::allocator<void> > GetItemGoal;

typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GetItemGoal > GetItemGoalPtr;
typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GetItemGoal const> GetItemGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator1> & lhs, const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator2> & rhs)
{
  return lhs.item == rhs.item;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator1> & lhs, const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosplan_tiago_scenarios_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d14a38979abbdbe6981f6dc67e36fef";
  }

  static const char* value(const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d14a38979abbdbeULL;
  static const uint64_t static_value2 = 0x6981f6dc67e36fefULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_tiago_scenarios_msgs/GetItemGoal";
  }

  static const char* value(const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"string item\n"
;
  }

  static const char* value(const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.item);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetItemGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_tiago_scenarios_msgs::GetItemGoal_<ContainerAllocator>& v)
  {
    s << indent << "item: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.item);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_TIAGO_SCENARIOS_MSGS_MESSAGE_GETITEMGOAL_H
