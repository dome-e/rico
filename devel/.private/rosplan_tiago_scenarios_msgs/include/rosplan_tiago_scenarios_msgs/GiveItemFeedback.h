// Generated by gencpp from file rosplan_tiago_scenarios_msgs/GiveItemFeedback.msg
// DO NOT EDIT!


#ifndef ROSPLAN_TIAGO_SCENARIOS_MSGS_MESSAGE_GIVEITEMFEEDBACK_H
#define ROSPLAN_TIAGO_SCENARIOS_MSGS_MESSAGE_GIVEITEMFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosplan_tiago_scenarios_msgs
{
template <class ContainerAllocator>
struct GiveItemFeedback_
{
  typedef GiveItemFeedback_<ContainerAllocator> Type;

  GiveItemFeedback_()
    : time_left(0)
    , is_item_detected(false)  {
    }
  GiveItemFeedback_(const ContainerAllocator& _alloc)
    : time_left(0)
    , is_item_detected(false)  {
  (void)_alloc;
    }



   typedef int16_t _time_left_type;
  _time_left_type time_left;

   typedef uint8_t _is_item_detected_type;
  _is_item_detected_type is_item_detected;





  typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct GiveItemFeedback_

typedef ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<std::allocator<void> > GiveItemFeedback;

typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback > GiveItemFeedbackPtr;
typedef boost::shared_ptr< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback const> GiveItemFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator1> & lhs, const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.time_left == rhs.time_left &&
    lhs.is_item_detected == rhs.is_item_detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator1> & lhs, const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosplan_tiago_scenarios_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9bbf0397c36b53dd120d617b82d90da";
  }

  static const char* value(const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9bbf0397c36b53dULL;
  static const uint64_t static_value2 = 0xd120d617b82d90daULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_tiago_scenarios_msgs/GiveItemFeedback";
  }

  static const char* value(const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Message\n"
"int16 time_left\n"
"bool is_item_detected\n"
;
  }

  static const char* value(const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_left);
      stream.next(m.is_item_detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GiveItemFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_tiago_scenarios_msgs::GiveItemFeedback_<ContainerAllocator>& v)
  {
    s << indent << "time_left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.time_left);
    s << indent << "is_item_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_item_detected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_TIAGO_SCENARIOS_MSGS_MESSAGE_GIVEITEMFEEDBACK_H
