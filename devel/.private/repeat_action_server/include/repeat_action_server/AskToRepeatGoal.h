// Generated by gencpp from file repeat_action_server/AskToRepeatGoal.msg
// DO NOT EDIT!


#ifndef REPEAT_ACTION_SERVER_MESSAGE_ASKTOREPEATGOAL_H
#define REPEAT_ACTION_SERVER_MESSAGE_ASKTOREPEATGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace repeat_action_server
{
template <class ContainerAllocator>
struct AskToRepeatGoal_
{
  typedef AskToRepeatGoal_<ContainerAllocator> Type;

  AskToRepeatGoal_()
    : frame_id()  {
    }
  AskToRepeatGoal_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _frame_id_type;
  _frame_id_type frame_id;





  typedef boost::shared_ptr< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> const> ConstPtr;

}; // struct AskToRepeatGoal_

typedef ::repeat_action_server::AskToRepeatGoal_<std::allocator<void> > AskToRepeatGoal;

typedef boost::shared_ptr< ::repeat_action_server::AskToRepeatGoal > AskToRepeatGoalPtr;
typedef boost::shared_ptr< ::repeat_action_server::AskToRepeatGoal const> AskToRepeatGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator1> & lhs, const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator1> & lhs, const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace repeat_action_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4d894dd5f0b96f98e7c7ff563058377";
  }

  static const char* value(const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4d894dd5f0b96f9ULL;
  static const uint64_t static_value2 = 0x8e7c7ff563058377ULL;
};

template<class ContainerAllocator>
struct DataType< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "repeat_action_server/AskToRepeatGoal";
  }

  static const char* value(const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"std_msgs/String frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AskToRepeatGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::repeat_action_server::AskToRepeatGoal_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REPEAT_ACTION_SERVER_MESSAGE_ASKTOREPEATGOAL_H
